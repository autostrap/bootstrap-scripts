#!/usr/bin/env python
# 2015, s.andres@syseleven.de

import glob
import json
import re
import os
import string
from subprocess import check_output
from optparse import OptionParser

def process_args():

    parser = OptionParser()
    parser.add_option("--key", action="append", help="This option takes "
                    "a <key>=<value> pair as its argument and may be specified "
                    "multiple times. Existing facts' values that match <key> "
                    "will be replaced by the specified value. This will only "
                    "affect facts existing on this system. Non-existent facts "
                    "will not be added.")

    parser.add_option("--modulepath", action="store", default='/opt/puppet-modules',
                    help="This option takes a colon delimited list of paths "
                    "that contain puppet modules, just like puppet's --modulepath "
                    "option. The puppet modules under these paths will be searched"
                    "for facts to use.")

    (options, args) = parser.parse_args()

    return options, args

if __name__ == '__main__':
    options, args = process_args()

    # Default module path to search for facts (can be overriden through the
    # environment variable $modulepath).

    modulepath=[]
    facterlib = []


    # Use any $FACTERLIB entries provided by the user.

    if os.environ.has_key('FACTERLIB'):
        facterlib.extend(os.environ['FACTERLIB'].split(':'))
    if options.modulepath:
        modulepath = options.modulepath.split(':')


    # Search Puppet modulepath for additional facts and extend $FACTERLIB
    # accordingly.

    for component in modulepath:
        for module in glob.glob(os.path.join(component, '*')):
            if os.path.isdir(module):
                facterpath = os.path.join(module, 'lib/facter')
                if os.path.isdir(facterpath):
                    facterlib.append(facterpath)

    os.environ['FACTERLIB'] = string.join(facterlib, ':')

    facts = json.loads(check_output('facter -jp', shell=True))
    facts_new = {}
    for fact in facts:
        if options.key:
            for option in options.key:
                o = option.split('=')
                if o[0] == fact:
                    facts[fact] = o[1]

        fact_replaced = re.sub('(.*)', '::\g<1>', fact)
        facts_new[fact_replaced] = facts[fact]

    print json.dumps(facts_new)
