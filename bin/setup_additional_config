#!/usr/bin/python3

import os
import subprocess
import sys

def main():
    target_dir = '/opt/config/additional'

    if not os.environ.get('additional_config'):
        exit(0)

    additional_configs = os.environ.get('additional_config').split(' ')

    if len(sys.argv) >= 2:
        command = sys.argv[1]
    else:
        usage()
        exit(1)

    repos = parse_additional_configs(additional_configs, target_dir)

    if command == 'clone':
        exit(clone(repos))
    if command == 'gen_hiera':
        gen_hiera(repos)
        exit(0)
    else:
        usage()
        exit(1)


def usage():
    """ Prints usage information. """
    print('usage: %s clone | gen_hiera' % sys.argv[0])

def parse_additional_configs(additional_configs, target_dir):
    """
    Parses $additional_config environment variable.

    $additional_config is a space separated string of repository definitions
    with the individual tokens formatted as follows:

    <repository url>[#<revision>]::[[<path>][:<path> ...]]

    The paths at the end specify the files to be included in hiera.yaml and are
    relative to the repository's root directory. You may omit the '.yaml'
    extension (if it exists it will be stripped).

    Example:

    additional_config='git@gitlab.syseleven.de:cloudstrap/bootstrap-scripts.git#os-673::bar/:baz/a:baz/b git@gitlab.syseleven.de:cloudstrap/project--config.git::bar/:baz/a:baz/b'

    """
    repos = {}
    for config in additional_configs:
        url_raw, paths = config.split('::')
        try:
            url, revision = url_raw.split('#')
        except ValueError: # Happens without optional '#<revision>' after URL.
            url = url_raw
            revision = None

        reponame = os.path.splitext(os.path.basename(url))[0]
        repos[reponame] = {}
        repos[reponame]['destdir'] = os.path.join(target_dir, reponame)
        repos[reponame]['include_paths'] = paths.split(':')
        repos[reponame]['revision'] = revision
        repos[reponame]['url'] = url
    return repos


def clone(repos):
    """ Clones additional configuration repositories. """
    retval = 0

    for repo in repos:
        if repos[repo]['revision']:
            clone_command = 'git clone --branch %s %s %s' % (
                    repos[repo]['revision'],
                    repos[repo]['url'],
                    repos[repo]['destdir'])
        else:
            clone_command = 'git clone %s %s' % (repos[repo]['url'],
                    repos[repo]['destdir'])

        link_command = 'ln -s %s %s' % (repos[repo]['destdir'], '/etc/puppet/hieradata')

        for command in [clone_command, link_command]:
            status, output = subprocess.getstatusoutput(command)
            if status == 0:
                print(output)
            else:
                print('%s returned %d, output follows' % (command, status), file=sys.stderr)
                print(output, file=sys.stderr)
                retval = 1

def gen_hiera(repos):
    """ Generates hiera.yaml entries for additional repositories. """
    for repo in repos:
        if not os.path.exists(repos[repo]['destdir']):
                print ('%s: No such file or directory. Did you run %s clone already?' % (
                    repos[repo]['destdir'],
                    sys.argv[0]),
                    file=sys.stderr)
                continue
        else:
            for path in repos[repo]['include_paths']:
                print('  - "%s"' % os.path.join(repo, path))


main()
