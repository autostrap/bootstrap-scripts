#!/usr/bin/env bash

# 2014, j.grassler@syseleven.de

lockdir=/tmp/initialize_instance.lock
if mkdir "$lockdir"; then
  #echo >&2 "successfully acquired lock"

  # Remove lockdir when the script finishes, or when it receives a signal
  trap 'rm -rf "$lockdir"' 0    # remove directory when script finishes
  trap "exit 2" 1 2 3 15  # terminate script when receiving signal

  # Optionally create temporary files in this directory, because
  # they will be removed automatically:
  tmpfile=$lockdir/filelist
else
  echo >&2 "cannot acquire lock, giving up on $lockdir"
  exit 0
fi

if [[ -f /var/log/initialize_instance.log ]]; then
  echo "ERROR: '/var/log/initialize_instance.log' already exists, not going to re-initialize system"
  logger "ERROR: '/var/log/initialize_instance.log' already exists, not going to re-initialize system"
  exit 1
fi

exec > /var/log/initialize_instance.log 2>&1
set -x

# Deprecation warnings for obsolete Heat parameters:

if [ -n "$additional_script" ]; then
  set +x
  echo "WARNING: You are using the deprecated additional_script parameter which is no longer effective. Place scripts in your project-config repository's bootstrap.d/ instead."
  set -x
fi

# Set DEBIAN_FRONTEND appropriately to avoid garbled dkpg output in log file.
export DEBIAN_FRONTEND=noninteractive

# Repositories:

: ${config_repo:=https://github.com/syseleven/project-config.git}
export config_repo
: ${config_branch:=master}
export config_branch
: ${sys11_config_repo:=https://github.com/syseleven/sys11-config.git}
export sys11_config_repo
: ${sys11_config_branch:=master}
export sys11_config_branch
: ${repodeploy_repo:=https://github.com/syseleven/puppet-repodeploy.git}
export repodeploy_repo
: ${repodeploy_branch:=master}
export repodeploy_branch


# Directories:

: ${scripts_dir:=/opt/scripts/sys11}
export scripts_dir
: ${config_dir:=/opt/config/project}
export config_dir
: ${sys11_config_dir:=/opt/config/sys11}
export sys11_config_dir
: ${bootstrap_dir:=${scripts_dir}/bootstrap.d}  # Bootstrapping scripts supplied by Syseleven.
export bootstrap_dir
: ${additional_dir:=${config_dir}/bootstrap.d}  # Bootstrapping scripts supplied by project.
export additional_dir
: ${stage_dir:=/opt/scripts/stages}             # All Bootstrapping scripts are symlinked to this directory and executed in order.
export stage_dir
: ${repos_bootstrap:=/etc/puppet/hieradata/repos_params.yaml} # puppet-repodeploy configuration for repositories from environment.
export repos_bootstrap


# Additional configuration repositories:

: ${additional_config:=''}
export additional_config

# Extra Hiera hierarchy entries to append after override.yaml

: ${extra_overrides:=''}
export extra_overrides


export bootstrap_stage=initialize_instance

name=$(hostname -s)

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/sbin:/usr/local/bin:${scripts_dir}/bin

# We'll need this early on to store repodeploy configuration for repositories
# specified through Heat paramaters.

mkdir -p /etc/puppet/hieradata
echo 'repodeploy::repos:' >> "$repos_bootstrap"

setup_repos
setup_stage_dir

for i in ${stage_dir}/*
do
  launch_logged $i 
done

log_stage_finished

env -u deploy_key

echo "finished $0"
